{"version":3,"sources":["logo.svg","App.tsx","index.tsx"],"names":["module","exports","otCore","otCoreOptions","credentials","apiKey","config","sessionId","token","streamContainers","pubSub","type","data","stream","publisher","camera","screen","subscriber","controlsContainer","packages","communication","callProperties","App","props","state","connected","active","publishers","subscribers","meta","localAudioEnabled","localVideoEnabled","startCall","bind","endCall","toggleLocalAudio","toggleLocalVideo","AccCore","connect","then","setState","forEach","event","on","catch","error","console","log","this","start","sharingScreen","viewingSharedScreen","activeCameraSubscribers","activeCameraSubscribersGt2","activeCameraSubscribersOdd","screenshareActive","controlClass","classNames","hidden","localAudioClass","muted","localVideoClass","localCallClass","cameraPublisherClass","small","left","screenPublisherClass","cameraSubscriberClass","screenSubscriberClass","containerClasses","className","src","logo","alt","onClick","id","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,6OCavCC,E,0JACEC,G,MAAgB,CAClBC,YAAa,CACTC,OAAQC,EAAOD,OACfE,UAAWD,EAAOC,UAClBC,MAAOF,EAAOE,OAGlBC,iBAPkB,SAODC,EAAQC,EAAMC,EAAMC,GACjC,MAAO,CACHC,UAAW,CACPC,OAAQ,4BACRC,OAAQ,6BAEZC,WAAY,CACRF,OAAQ,6BACRC,OAAQ,+BAEdN,GAAQC,IAEdO,kBAAmB,YAEnBC,SAAU,GACVC,cAAe,CACXC,eAAgB,QA2KTC,E,kDAhGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAW,EACXC,QAAQ,EACRC,WAAY,KACZC,YAAa,KACbC,KAAM,KACNC,mBAAmB,EACnBC,mBAAmB,GAEvB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBAdT,E,gEAiBE,IAAD,QAChB/B,EAAS,IAAImC,IAAQlC,IACdmC,UAAUC,MAAK,kBAAM,EAAKC,SAAS,CAAEf,WAAW,OACxC,CACX,oBACA,wBACA,oBACA,wBACA,mBACA,kBAGGgB,SAAQ,SAAAC,GAAK,OAAIxC,EAAOyC,GAAGD,GAAO,YAAwC,IAArCf,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACjE,EAAKW,SAAS,CAAEb,aAAYC,cAAaC,iB,kCAIpC,IAAD,OACR3B,EAAO8B,YACFO,MAAK,YAAwC,IAArCZ,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAC9B,EAAKW,SAAS,CAAEb,aAAYC,cAAaC,OAAMH,QAAQ,OACxDkB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,gCAIlC3C,EAAOgC,UACPc,KAAKR,SAAS,CAAEd,QAAQ,M,yCAIxBxB,EAAOiC,kBAAkBa,KAAKxB,MAAMM,mBACpCkB,KAAKR,SAAS,CAAEV,mBAAoBkB,KAAKxB,MAAMM,sB,yCAI/C5B,EAAOkC,kBAAkBY,KAAKxB,MAAMO,mBACpCiB,KAAKR,SAAS,CAAET,mBAAoBiB,KAAKxB,MAAMO,sB,+BAGzC,IA/DQkB,EA+DT,EACyBD,KAAKxB,MAA3BC,EADH,EACGA,UAAWC,EADd,EACcA,OADd,EA9FY,SAACF,GAAW,IACzBE,EAAuDF,EAAvDE,OAAQG,EAA+CL,EAA/CK,KAAMC,EAAyCN,EAAzCM,kBAAmBC,EAAsBP,EAAtBO,kBACnCmB,IAAgBrB,KAASA,EAAKf,UAAUE,OACxCmC,IAAsBtB,GAAOA,EAAKZ,WAAWD,OAC7CoC,EAA0BvB,EAAOA,EAAKZ,WAAWF,OAAS,EAC1DsC,EAA6BD,EAA0B,EACvDE,EAA6BF,EAA0B,EACvDG,EAAoBJ,GAAuBD,EACjD,MAAO,CACHM,aAAcC,IAAW,wBAAyB,CAAEC,QAAShC,IAC7DiC,gBAAiBF,IAAW,iCAAkC,CAAEC,QAAShC,EAAQkC,OAAQ9B,IACzF+B,gBAAiBJ,IAAW,iCAAkC,CAAEC,QAAShC,EAAQkC,OAAQ7B,IACzF+B,eAAgBL,IAAW,oCAAqC,CAAEC,QAAShC,IAC3EqC,qBAAsBN,IAAW,kBAAmB,CAAEC,QAAShC,EAAQsC,QAASZ,GAA2BG,EAAmBU,KAAMV,IACpIW,qBAAsBT,IAAW,kBAAmB,CAAEC,QAAShC,IAAWwB,IAC1EiB,sBAAuBV,IAAW,kBAAmB,CAAEC,QAAShC,IAAW0B,GACvE,CAAE,aAAcC,IAA+BE,GAC/C,CAAE,aAAcD,IAA+BC,GAC/C,CAAES,MAAOT,IAEba,sBAAuBX,IAAW,kBAAmB,CAAEC,QAASP,IAAwBzB,KAqFpF2C,CAAiBrB,KAAKxB,OARtBmC,EAHC,EAGDA,gBACAE,EAJC,EAIDA,gBACAC,EALC,EAKDA,eACAN,EANC,EAMDA,aACAO,EAPC,EAODA,qBACAG,EARC,EAQDA,qBACAC,EATC,EASDA,sBACAC,EAVC,EAUDA,sBAGJ,OACI,yBAAKE,UAAU,OACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yDAEJ,yBAAKH,UAAU,YACX,yBAAKA,UAAU,wBACR7C,GA1FvB,yBAAK6C,UAAU,YACX,kBAAC,IAAD,MACA,yBAAKA,UAAU,wBAAf,eAyFkB7C,IAAcC,IArFlBuB,EAqF0CD,KAAKhB,UApFjE,yBAAKsC,UAAU,YACX,4BAAQA,UAAU,2BAA2BI,QAASzB,GAAtD,0BAoFgB,yBAAK0B,GAAG,2BAA2BL,UAAWP,IAC9C,yBAAKY,GAAG,2BAA2BL,UAAWJ,IAC9C,yBAAKS,GAAG,4BAA4BL,UAAWH,IAC/C,yBAAKQ,GAAG,4BAA4BL,UAAWF,KAEnD,yBAAKO,GAAG,WAAWL,UAAWd,GAC1B,yBAAKc,UAAWX,EAAiBe,QAAS1B,KAAKb,mBAC/C,yBAAKmC,UAAWT,EAAiBa,QAAS1B,KAAKZ,mBAC/C,yBAAKkC,UAAWR,EAAgBY,QAAS1B,KAAKd,WAElD,yBAAKyC,GAAG,OAAOL,UAAU,6B,GA3F3BM,aCzGlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8488e8c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cd18bdec.svg\";","//  @ts-nocheck\n\nimport React, { Component } from 'react';\nimport Spinner from 'react-spinner';\nimport classNames from 'classnames';\nimport AccCore from 'opentok-accelerator-core/dist/core';\n\n\nimport logo from './logo.svg';\nimport config from './config.json';\nimport './App.css';\n\n//  @ts-ignore\nlet otCore;\nconst otCoreOptions = {\n    credentials: {\n        apiKey: config.apiKey,\n        sessionId: config.sessionId,\n        token: config.token,\n    },\n    // A container can either be a query selector or an HTML Element\n    streamContainers(pubSub, type, data, stream) {\n        return {\n            publisher: {\n                camera: '#cameraPublisherContainer',\n                screen: '#screenPublisherContainer',\n            },\n            subscriber: {\n                camera: '#cameraSubscriberContainer',\n                screen: '#screenSubscriberContainer',\n            },\n        }[pubSub][type];\n    },\n    controlsContainer: '#controls',\n    //packages: ['textChat', 'screenSharing', 'annotation'],\n    packages: [],\n    communication: {\n        callProperties: null, // Using default\n    },\n    // textChat: {\n    //     name: ['David', 'Paul', 'Emma', 'George', 'Amanda'][Math.random() * 5 | 0], // eslint-disable-line no-bitwise\n    //     waitingMessage: 'Messages will be delivered when other users arrive',\n    //     container: '#chat',\n    // },\n    // screenSharing: {\n    //     extensionID: 'plocfffmbcclpdifaikiikgplfnepkpo',\n    //     annotation: true,\n    //     externalWindow: false,\n    //     dev: true,\n    //     screenProperties: {\n    //         insertMode: 'append',\n    //         width: '100%',\n    //         height: '100%',\n    //         showControls: false,\n    //         style: {\n    //             buttonDisplayMode: 'off',\n    //         },\n    //         videoSource: 'window',\n    //         fitMode: 'contain' // Using default\n    //     },\n    // },\n    // annotation: {\n    //     absoluteParent: {\n    //         publisher: '.App-video-container',\n    //         subscriber: '.App-video-container'\n    //     }\n    // },\n};\n\n/**\n * Build classes for container elements based on state\n * @param {Object} state\n */\n//  @ts-ignore\nconst containerClasses = (state) => {\n    const { active, meta, localAudioEnabled, localVideoEnabled } = state;\n    const sharingScreen = meta ? !!meta.publisher.screen : false;\n    const viewingSharedScreen = meta ? meta.subscriber.screen : false;\n    const activeCameraSubscribers = meta ? meta.subscriber.camera : 0;\n    const activeCameraSubscribersGt2 = activeCameraSubscribers > 2;\n    const activeCameraSubscribersOdd = activeCameraSubscribers % 2;\n    const screenshareActive = viewingSharedScreen || sharingScreen;\n    return {\n        controlClass: classNames('App-control-container', { hidden: !active }),\n        localAudioClass: classNames('ots-video-control circle audio', { hidden: !active, muted: !localAudioEnabled }),\n        localVideoClass: classNames('ots-video-control circle video', { hidden: !active, muted: !localVideoEnabled }),\n        localCallClass: classNames('ots-video-control circle end-call', { hidden: !active }),\n        cameraPublisherClass: classNames('video-container', { hidden: !active, small: !!activeCameraSubscribers || screenshareActive, left: screenshareActive }),\n        screenPublisherClass: classNames('video-container', { hidden: !active || !sharingScreen }),\n        cameraSubscriberClass: classNames('video-container', { hidden: !active || !activeCameraSubscribers },\n            { 'active-gt2': activeCameraSubscribersGt2 && !screenshareActive },\n            { 'active-odd': activeCameraSubscribersOdd && !screenshareActive },\n            { small: screenshareActive }\n        ),\n        screenSubscriberClass: classNames('video-container', { hidden: !viewingSharedScreen || !active }),\n    };\n};\n\nconst connectingMask = () =>\n    <div className=\"App-mask\">\n        <Spinner />\n        <div className=\"message with-spinner\">Connecting</div>\n    </div>;\n\n//  @ts-ignore\nconst startCallMask = start =>\n    <div className=\"App-mask\">\n        <button className=\"message button clickable\" onClick={start}>Click to Start Call </button>\n    </div>;\n\nclass App extends Component {\n    //  @ts-ignore\n    constructor(props) {\n        super(props);\n        this.state = {\n            connected: false,\n            active: false,\n            publishers: null,\n            subscribers: null,\n            meta: null,\n            localAudioEnabled: true,\n            localVideoEnabled: true,\n        };\n        this.startCall = this.startCall.bind(this);\n        this.endCall = this.endCall.bind(this);\n        this.toggleLocalAudio = this.toggleLocalAudio.bind(this);\n        this.toggleLocalVideo = this.toggleLocalVideo.bind(this);\n    }\n\n    componentDidMount() {\n        otCore = new AccCore(otCoreOptions);\n        otCore.connect().then(() => this.setState({ connected: true }));\n        const events = [\n            'subscribeToCamera',\n            'unsubscribeFromCamera',\n            'subscribeToScreen',\n            'unsubscribeFromScreen',\n            'startScreenShare',\n            'endScreenShare',\n        ];\n\n        events.forEach(event => otCore.on(event, ({ publishers, subscribers, meta }) => {\n            this.setState({ publishers, subscribers, meta });\n        }));\n    }\n\n    startCall() {\n        otCore.startCall()\n            .then(({ publishers, subscribers, meta }) => {\n                this.setState({ publishers, subscribers, meta, active: true });\n            }).catch(error => console.log(error));\n    }\n\n    endCall() {\n        otCore.endCall();\n        this.setState({ active: false });\n    }\n\n    toggleLocalAudio() {\n        otCore.toggleLocalAudio(!this.state.localAudioEnabled);\n        this.setState({ localAudioEnabled: !this.state.localAudioEnabled });\n    }\n\n    toggleLocalVideo() {\n        otCore.toggleLocalVideo(!this.state.localVideoEnabled);\n        this.setState({ localVideoEnabled: !this.state.localVideoEnabled });\n    }\n\n    render() {\n        const { connected, active } = this.state;\n        const {\n            localAudioClass,\n            localVideoClass,\n            localCallClass,\n            controlClass,\n            cameraPublisherClass,\n            screenPublisherClass,\n            cameraSubscriberClass,\n            screenSubscriberClass,\n        } = containerClasses(this.state);\n\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h1>OpenTok Accelerator Core</h1>\n                </div>\n                <div className=\"App-main\">\n                    <div className=\"App-video-container\">\n                        { !connected && connectingMask() }\n                        { connected && !active && startCallMask(this.startCall)}\n                        <div id=\"cameraPublisherContainer\" className={cameraPublisherClass} />\n                        <div id=\"screenPublisherContainer\" className={screenPublisherClass} />\n                        <div id=\"cameraSubscriberContainer\" className={cameraSubscriberClass} />\n                        <div id=\"screenSubscriberContainer\" className={screenSubscriberClass} />\n                    </div>\n                    <div id=\"controls\" className={controlClass}>\n                        <div className={localAudioClass} onClick={this.toggleLocalAudio} />\n                        <div className={localVideoClass} onClick={this.toggleLocalVideo} />\n                        <div className={localCallClass} onClick={this.endCall} />\n                    </div>\n                    <div id=\"chat\" className=\"App-chat-container\" />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}